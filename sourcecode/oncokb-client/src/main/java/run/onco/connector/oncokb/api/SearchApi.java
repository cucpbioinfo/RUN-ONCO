/*
 * OncoKB APIs
 * OncoKB, a comprehensive and curated precision oncology knowledge base, offers oncologists detailed, evidence-based information about individual somatic mutations and structural alterations present in patient tumors with the goal of supporting optimal treatment decisions.
 *
 * OpenAPI spec version: v1.0.0
 * Contact: team@oncokb.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package run.onco.connector.oncokb.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import run.onco.connector.oncokb.ApiCallback;
import run.onco.connector.oncokb.ApiClient;
import run.onco.connector.oncokb.ApiException;
import run.onco.connector.oncokb.ApiResponse;
import run.onco.connector.oncokb.Configuration;
import run.onco.connector.oncokb.Pair;
import run.onco.connector.oncokb.ProgressRequestBody;
import run.onco.connector.oncokb.ProgressResponseBody;
import run.onco.connector.oncokb.model.Alteration;
import run.onco.connector.oncokb.model.Drug;
import run.onco.connector.oncokb.model.Evidence;
import run.onco.connector.oncokb.model.EvidenceQueries;
import run.onco.connector.oncokb.model.EvidenceQueryRes;
import run.onco.connector.oncokb.model.Gene;
import run.onco.connector.oncokb.model.IndicatorQueryResp;
import run.onco.connector.oncokb.model.VariantSearchQuery;

public class SearchApi {
    private ApiClient apiClient;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for drugsLookupGetUsingGET
     * @param exactMatch Exactly Match (required)
     * @param name Drug Name (optional)
     * @param atcCode ATC Code (optional)
     * @param synonym Drug Synonyms (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call drugsLookupGetUsingGETCall(Boolean exactMatch, String name, String atcCode, String synonym, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/drugs/lookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (atcCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("atcCode", atcCode));
        if (synonym != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("synonym", synonym));
        if (exactMatch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exactMatch", exactMatch));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call drugsLookupGetUsingGETValidateBeforeCall(Boolean exactMatch, String name, String atcCode, String synonym, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'exactMatch' is set
        if (exactMatch == null) {
            throw new ApiException("Missing the required parameter 'exactMatch' when calling drugsLookupGetUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = drugsLookupGetUsingGETCall(exactMatch, name, atcCode, synonym, progressListener, progressRequestListener);
        return call;

    }

    /**
     * drugsLookupGet
     * Search drugs.
     * @param exactMatch Exactly Match (required)
     * @param name Drug Name (optional)
     * @param atcCode ATC Code (optional)
     * @param synonym Drug Synonyms (optional)
     * @return List&lt;Drug&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Drug> drugsLookupGetUsingGET(Boolean exactMatch, String name, String atcCode, String synonym) throws ApiException {
        ApiResponse<List<Drug>> resp = drugsLookupGetUsingGETWithHttpInfo(exactMatch, name, atcCode, synonym);
        return resp.getData();
    }

    /**
     * drugsLookupGet
     * Search drugs.
     * @param exactMatch Exactly Match (required)
     * @param name Drug Name (optional)
     * @param atcCode ATC Code (optional)
     * @param synonym Drug Synonyms (optional)
     * @return ApiResponse&lt;List&lt;Drug&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Drug>> drugsLookupGetUsingGETWithHttpInfo(Boolean exactMatch, String name, String atcCode, String synonym) throws ApiException {
        com.squareup.okhttp.Call call = drugsLookupGetUsingGETValidateBeforeCall(exactMatch, name, atcCode, synonym, null, null);
        Type localVarReturnType = new TypeToken<List<Drug>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * drugsLookupGet (asynchronously)
     * Search drugs.
     * @param exactMatch Exactly Match (required)
     * @param name Drug Name (optional)
     * @param atcCode ATC Code (optional)
     * @param synonym Drug Synonyms (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call drugsLookupGetUsingGETAsync(Boolean exactMatch, String name, String atcCode, String synonym, final ApiCallback<List<Drug>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = drugsLookupGetUsingGETValidateBeforeCall(exactMatch, name, atcCode, synonym, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Drug>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for evidencesLookupGetUsingGET
     * @param entrezGeneId The entrez gene ID. (optional)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (optional)
     * @param variant Variant name. (optional)
     * @param tumorType Tumor type name. OncoTree code is supported. (optional)
     * @param consequence Consequence. Possible value: feature_truncation, frameshift_variant, inframe_deletion, inframe_insertion, start_lost, missense_variant, splice_region_variant, stop_gained, synonymous_variant (optional)
     * @param proteinStart Protein Start. (optional)
     * @param proteinEnd Protein End. (optional)
     * @param source Tumor type source. OncoTree tumor types are the default setting. We may have customized version, like Quest. (optional, default to oncotree)
     * @param highestLevelOnly Only show highest level evidences (optional, default to false)
     * @param levelOfEvidence Separate by comma. LEVEL_1, LEVEL_2A, LEVEL_2B, LEVEL_3A, LEVEL_3B, LEVEL_4, LEVEL_R1, LEVEL_R2, LEVEL_R3 (optional)
     * @param evidenceTypes Separate by comma. Evidence type includes GENE_SUMMARY, GENE_BACKGROUND, MUTATION_SUMMARY, ONCOGENIC, MUTATION_EFFECT, VUS, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, TUMOR_TYPE_SUMMARY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE (optional)
     * @param fields The fields to be returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call evidencesLookupGetUsingGETCall(Integer entrezGeneId, String hugoSymbol, String variant, String tumorType, String consequence, String proteinStart, String proteinEnd, String source, Boolean highestLevelOnly, String levelOfEvidence, String evidenceTypes, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/evidences/lookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entrezGeneId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entrezGeneId", entrezGeneId));
        if (hugoSymbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hugoSymbol", hugoSymbol));
        if (variant != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("variant", variant));
        if (tumorType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tumorType", tumorType));
        if (consequence != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("consequence", consequence));
        if (proteinStart != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("proteinStart", proteinStart));
        if (proteinEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("proteinEnd", proteinEnd));
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));
        if (highestLevelOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("highestLevelOnly", highestLevelOnly));
        if (levelOfEvidence != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("levelOfEvidence", levelOfEvidence));
        if (evidenceTypes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("evidenceTypes", evidenceTypes));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call evidencesLookupGetUsingGETValidateBeforeCall(Integer entrezGeneId, String hugoSymbol, String variant, String tumorType, String consequence, String proteinStart, String proteinEnd, String source, Boolean highestLevelOnly, String levelOfEvidence, String evidenceTypes, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = evidencesLookupGetUsingGETCall(entrezGeneId, hugoSymbol, variant, tumorType, consequence, proteinStart, proteinEnd, source, highestLevelOnly, levelOfEvidence, evidenceTypes, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * evidencesLookupGet
     * Search evidences. Multi-queries are supported.
     * @param entrezGeneId The entrez gene ID. (optional)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (optional)
     * @param variant Variant name. (optional)
     * @param tumorType Tumor type name. OncoTree code is supported. (optional)
     * @param consequence Consequence. Possible value: feature_truncation, frameshift_variant, inframe_deletion, inframe_insertion, start_lost, missense_variant, splice_region_variant, stop_gained, synonymous_variant (optional)
     * @param proteinStart Protein Start. (optional)
     * @param proteinEnd Protein End. (optional)
     * @param source Tumor type source. OncoTree tumor types are the default setting. We may have customized version, like Quest. (optional, default to oncotree)
     * @param highestLevelOnly Only show highest level evidences (optional, default to false)
     * @param levelOfEvidence Separate by comma. LEVEL_1, LEVEL_2A, LEVEL_2B, LEVEL_3A, LEVEL_3B, LEVEL_4, LEVEL_R1, LEVEL_R2, LEVEL_R3 (optional)
     * @param evidenceTypes Separate by comma. Evidence type includes GENE_SUMMARY, GENE_BACKGROUND, MUTATION_SUMMARY, ONCOGENIC, MUTATION_EFFECT, VUS, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, TUMOR_TYPE_SUMMARY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE (optional)
     * @param fields The fields to be returned. (optional)
     * @return List&lt;Evidence&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Evidence> evidencesLookupGetUsingGET(Integer entrezGeneId, String hugoSymbol, String variant, String tumorType, String consequence, String proteinStart, String proteinEnd, String source, Boolean highestLevelOnly, String levelOfEvidence, String evidenceTypes, String fields) throws ApiException {
        ApiResponse<List<Evidence>> resp = evidencesLookupGetUsingGETWithHttpInfo(entrezGeneId, hugoSymbol, variant, tumorType, consequence, proteinStart, proteinEnd, source, highestLevelOnly, levelOfEvidence, evidenceTypes, fields);
        return resp.getData();
    }

    /**
     * evidencesLookupGet
     * Search evidences. Multi-queries are supported.
     * @param entrezGeneId The entrez gene ID. (optional)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (optional)
     * @param variant Variant name. (optional)
     * @param tumorType Tumor type name. OncoTree code is supported. (optional)
     * @param consequence Consequence. Possible value: feature_truncation, frameshift_variant, inframe_deletion, inframe_insertion, start_lost, missense_variant, splice_region_variant, stop_gained, synonymous_variant (optional)
     * @param proteinStart Protein Start. (optional)
     * @param proteinEnd Protein End. (optional)
     * @param source Tumor type source. OncoTree tumor types are the default setting. We may have customized version, like Quest. (optional, default to oncotree)
     * @param highestLevelOnly Only show highest level evidences (optional, default to false)
     * @param levelOfEvidence Separate by comma. LEVEL_1, LEVEL_2A, LEVEL_2B, LEVEL_3A, LEVEL_3B, LEVEL_4, LEVEL_R1, LEVEL_R2, LEVEL_R3 (optional)
     * @param evidenceTypes Separate by comma. Evidence type includes GENE_SUMMARY, GENE_BACKGROUND, MUTATION_SUMMARY, ONCOGENIC, MUTATION_EFFECT, VUS, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, TUMOR_TYPE_SUMMARY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE (optional)
     * @param fields The fields to be returned. (optional)
     * @return ApiResponse&lt;List&lt;Evidence&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Evidence>> evidencesLookupGetUsingGETWithHttpInfo(Integer entrezGeneId, String hugoSymbol, String variant, String tumorType, String consequence, String proteinStart, String proteinEnd, String source, Boolean highestLevelOnly, String levelOfEvidence, String evidenceTypes, String fields) throws ApiException {
        com.squareup.okhttp.Call call = evidencesLookupGetUsingGETValidateBeforeCall(entrezGeneId, hugoSymbol, variant, tumorType, consequence, proteinStart, proteinEnd, source, highestLevelOnly, levelOfEvidence, evidenceTypes, fields, null, null);
        Type localVarReturnType = new TypeToken<List<Evidence>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * evidencesLookupGet (asynchronously)
     * Search evidences. Multi-queries are supported.
     * @param entrezGeneId The entrez gene ID. (optional)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (optional)
     * @param variant Variant name. (optional)
     * @param tumorType Tumor type name. OncoTree code is supported. (optional)
     * @param consequence Consequence. Possible value: feature_truncation, frameshift_variant, inframe_deletion, inframe_insertion, start_lost, missense_variant, splice_region_variant, stop_gained, synonymous_variant (optional)
     * @param proteinStart Protein Start. (optional)
     * @param proteinEnd Protein End. (optional)
     * @param source Tumor type source. OncoTree tumor types are the default setting. We may have customized version, like Quest. (optional, default to oncotree)
     * @param highestLevelOnly Only show highest level evidences (optional, default to false)
     * @param levelOfEvidence Separate by comma. LEVEL_1, LEVEL_2A, LEVEL_2B, LEVEL_3A, LEVEL_3B, LEVEL_4, LEVEL_R1, LEVEL_R2, LEVEL_R3 (optional)
     * @param evidenceTypes Separate by comma. Evidence type includes GENE_SUMMARY, GENE_BACKGROUND, MUTATION_SUMMARY, ONCOGENIC, MUTATION_EFFECT, VUS, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, TUMOR_TYPE_SUMMARY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE (optional)
     * @param fields The fields to be returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call evidencesLookupGetUsingGETAsync(Integer entrezGeneId, String hugoSymbol, String variant, String tumorType, String consequence, String proteinStart, String proteinEnd, String source, Boolean highestLevelOnly, String levelOfEvidence, String evidenceTypes, String fields, final ApiCallback<List<Evidence>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = evidencesLookupGetUsingGETValidateBeforeCall(entrezGeneId, hugoSymbol, variant, tumorType, consequence, proteinStart, proteinEnd, source, highestLevelOnly, levelOfEvidence, evidenceTypes, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Evidence>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for evidencesLookupPostUsingPOST
     * @param body List of queries. Please see swagger.json for request body format. Please use JSON string. (required)
     * @param fields The fields to be returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call evidencesLookupPostUsingPOSTCall(EvidenceQueries body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/evidences/lookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call evidencesLookupPostUsingPOSTValidateBeforeCall(EvidenceQueries body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling evidencesLookupPostUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = evidencesLookupPostUsingPOSTCall(body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * evidencesLookupPost
     * Search evidences.
     * @param body List of queries. Please see swagger.json for request body format. Please use JSON string. (required)
     * @param fields The fields to be returned. (optional)
     * @return List&lt;EvidenceQueryRes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EvidenceQueryRes> evidencesLookupPostUsingPOST(EvidenceQueries body, String fields) throws ApiException {
        ApiResponse<List<EvidenceQueryRes>> resp = evidencesLookupPostUsingPOSTWithHttpInfo(body, fields);
        return resp.getData();
    }

    /**
     * evidencesLookupPost
     * Search evidences.
     * @param body List of queries. Please see swagger.json for request body format. Please use JSON string. (required)
     * @param fields The fields to be returned. (optional)
     * @return ApiResponse&lt;List&lt;EvidenceQueryRes&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EvidenceQueryRes>> evidencesLookupPostUsingPOSTWithHttpInfo(EvidenceQueries body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = evidencesLookupPostUsingPOSTValidateBeforeCall(body, fields, null, null);
        Type localVarReturnType = new TypeToken<List<EvidenceQueryRes>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * evidencesLookupPost (asynchronously)
     * Search evidences.
     * @param body List of queries. Please see swagger.json for request body format. Please use JSON string. (required)
     * @param fields The fields to be returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call evidencesLookupPostUsingPOSTAsync(EvidenceQueries body, String fields, final ApiCallback<List<EvidenceQueryRes>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = evidencesLookupPostUsingPOSTValidateBeforeCall(body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EvidenceQueryRes>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for genesLookupGetUsingGET
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (Deprecated, use query instead) (optional)
     * @param entrezGeneId The entrez gene ID. (Deprecated, use query instead) (optional)
     * @param query The search query, it could be hugoSymbol or entrezGeneId. (optional)
     * @param fields The fields to be returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call genesLookupGetUsingGETCall(String hugoSymbol, Integer entrezGeneId, String query, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/genes/lookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (hugoSymbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hugoSymbol", hugoSymbol));
        if (entrezGeneId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entrezGeneId", entrezGeneId));
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call genesLookupGetUsingGETValidateBeforeCall(String hugoSymbol, Integer entrezGeneId, String query, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = genesLookupGetUsingGETCall(hugoSymbol, entrezGeneId, query, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * genesLookupGet
     * Search gene.
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (Deprecated, use query instead) (optional)
     * @param entrezGeneId The entrez gene ID. (Deprecated, use query instead) (optional)
     * @param query The search query, it could be hugoSymbol or entrezGeneId. (optional)
     * @param fields The fields to be returned. (optional)
     * @return List&lt;Gene&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Gene> genesLookupGetUsingGET(String hugoSymbol, Integer entrezGeneId, String query, String fields) throws ApiException {
        ApiResponse<List<Gene>> resp = genesLookupGetUsingGETWithHttpInfo(hugoSymbol, entrezGeneId, query, fields);
        return resp.getData();
    }

    /**
     * genesLookupGet
     * Search gene.
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (Deprecated, use query instead) (optional)
     * @param entrezGeneId The entrez gene ID. (Deprecated, use query instead) (optional)
     * @param query The search query, it could be hugoSymbol or entrezGeneId. (optional)
     * @param fields The fields to be returned. (optional)
     * @return ApiResponse&lt;List&lt;Gene&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Gene>> genesLookupGetUsingGETWithHttpInfo(String hugoSymbol, Integer entrezGeneId, String query, String fields) throws ApiException {
        com.squareup.okhttp.Call call = genesLookupGetUsingGETValidateBeforeCall(hugoSymbol, entrezGeneId, query, fields, null, null);
        Type localVarReturnType = new TypeToken<List<Gene>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * genesLookupGet (asynchronously)
     * Search gene.
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (Deprecated, use query instead) (optional)
     * @param entrezGeneId The entrez gene ID. (Deprecated, use query instead) (optional)
     * @param query The search query, it could be hugoSymbol or entrezGeneId. (optional)
     * @param fields The fields to be returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call genesLookupGetUsingGETAsync(String hugoSymbol, Integer entrezGeneId, String query, String fields, final ApiCallback<List<Gene>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = genesLookupGetUsingGETValidateBeforeCall(hugoSymbol, entrezGeneId, query, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Gene>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchGetUsingGET
     * @param id The query ID (optional)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (optional)
     * @param entrezGeneId The entrez gene ID. (optional)
     * @param variant Variant name. (optional)
     * @param variantType Variant type. (optional)
     * @param svType Structural Variant Type. (optional)
     * @param consequence Consequence (optional)
     * @param proteinStart Protein Start (optional)
     * @param proteinEnd Protein End (optional)
     * @param tumorType Tumor type name. OncoTree code is supported. (optional)
     * @param source Tumor type source. OncoTree tumor types are the default setting. We may have customized version, like Quest. (optional, default to oncotree)
     * @param levels Level of evidences. (optional)
     * @param highestLevelOnly Only show treatments of highest level (optional, default to false)
     * @param queryType Query type. There maybe slight differences between different query types. Currently support web or regular. (optional, default to regular)
     * @param evidenceType Evidence type. (optional)
     * @param hgvs HGVS varaint. Its priority is higher than entrezGeneId/hugoSymbol + variant combination (optional)
     * @param fields The fields to be returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchGetUsingGETCall(String id, String hugoSymbol, Integer entrezGeneId, String variant, String variantType, String svType, String consequence, Integer proteinStart, Integer proteinEnd, String tumorType, String source, String levels, Boolean highestLevelOnly, String queryType, String evidenceType, String hgvs, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (hugoSymbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hugoSymbol", hugoSymbol));
        if (entrezGeneId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entrezGeneId", entrezGeneId));
        if (variant != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("variant", variant));
        if (variantType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("variantType", variantType));
        if (svType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("svType", svType));
        if (consequence != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("consequence", consequence));
        if (proteinStart != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("proteinStart", proteinStart));
        if (proteinEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("proteinEnd", proteinEnd));
        if (tumorType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tumorType", tumorType));
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));
        if (levels != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("levels", levels));
        if (highestLevelOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("highestLevelOnly", highestLevelOnly));
        if (queryType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("queryType", queryType));
        if (evidenceType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("evidenceType", evidenceType));
        if (hgvs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hgvs", hgvs));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchGetUsingGETValidateBeforeCall(String id, String hugoSymbol, Integer entrezGeneId, String variant, String variantType, String svType, String consequence, Integer proteinStart, Integer proteinEnd, String tumorType, String source, String levels, Boolean highestLevelOnly, String queryType, String evidenceType, String hgvs, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchGetUsingGETCall(id, hugoSymbol, entrezGeneId, variant, variantType, svType, consequence, proteinStart, proteinEnd, tumorType, source, levels, highestLevelOnly, queryType, evidenceType, hgvs, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * searchGet
     * General search for possible combinations.
     * @param id The query ID (optional)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (optional)
     * @param entrezGeneId The entrez gene ID. (optional)
     * @param variant Variant name. (optional)
     * @param variantType Variant type. (optional)
     * @param svType Structural Variant Type. (optional)
     * @param consequence Consequence (optional)
     * @param proteinStart Protein Start (optional)
     * @param proteinEnd Protein End (optional)
     * @param tumorType Tumor type name. OncoTree code is supported. (optional)
     * @param source Tumor type source. OncoTree tumor types are the default setting. We may have customized version, like Quest. (optional, default to oncotree)
     * @param levels Level of evidences. (optional)
     * @param highestLevelOnly Only show treatments of highest level (optional, default to false)
     * @param queryType Query type. There maybe slight differences between different query types. Currently support web or regular. (optional, default to regular)
     * @param evidenceType Evidence type. (optional)
     * @param hgvs HGVS varaint. Its priority is higher than entrezGeneId/hugoSymbol + variant combination (optional)
     * @param fields The fields to be returned. (optional)
     * @return IndicatorQueryResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IndicatorQueryResp searchGetUsingGET(String id, String hugoSymbol, Integer entrezGeneId, String variant, String variantType, String svType, String consequence, Integer proteinStart, Integer proteinEnd, String tumorType, String source, String levels, Boolean highestLevelOnly, String queryType, String evidenceType, String hgvs, String fields) throws ApiException {
        ApiResponse<IndicatorQueryResp> resp = searchGetUsingGETWithHttpInfo(id, hugoSymbol, entrezGeneId, variant, variantType, svType, consequence, proteinStart, proteinEnd, tumorType, source, levels, highestLevelOnly, queryType, evidenceType, hgvs, fields);
        return resp.getData();
    }

    /**
     * searchGet
     * General search for possible combinations.
     * @param id The query ID (optional)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (optional)
     * @param entrezGeneId The entrez gene ID. (optional)
     * @param variant Variant name. (optional)
     * @param variantType Variant type. (optional)
     * @param svType Structural Variant Type. (optional)
     * @param consequence Consequence (optional)
     * @param proteinStart Protein Start (optional)
     * @param proteinEnd Protein End (optional)
     * @param tumorType Tumor type name. OncoTree code is supported. (optional)
     * @param source Tumor type source. OncoTree tumor types are the default setting. We may have customized version, like Quest. (optional, default to oncotree)
     * @param levels Level of evidences. (optional)
     * @param highestLevelOnly Only show treatments of highest level (optional, default to false)
     * @param queryType Query type. There maybe slight differences between different query types. Currently support web or regular. (optional, default to regular)
     * @param evidenceType Evidence type. (optional)
     * @param hgvs HGVS varaint. Its priority is higher than entrezGeneId/hugoSymbol + variant combination (optional)
     * @param fields The fields to be returned. (optional)
     * @return ApiResponse&lt;IndicatorQueryResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IndicatorQueryResp> searchGetUsingGETWithHttpInfo(String id, String hugoSymbol, Integer entrezGeneId, String variant, String variantType, String svType, String consequence, Integer proteinStart, Integer proteinEnd, String tumorType, String source, String levels, Boolean highestLevelOnly, String queryType, String evidenceType, String hgvs, String fields) throws ApiException {
        com.squareup.okhttp.Call call = searchGetUsingGETValidateBeforeCall(id, hugoSymbol, entrezGeneId, variant, variantType, svType, consequence, proteinStart, proteinEnd, tumorType, source, levels, highestLevelOnly, queryType, evidenceType, hgvs, fields, null, null);
        Type localVarReturnType = new TypeToken<IndicatorQueryResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * searchGet (asynchronously)
     * General search for possible combinations.
     * @param id The query ID (optional)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (optional)
     * @param entrezGeneId The entrez gene ID. (optional)
     * @param variant Variant name. (optional)
     * @param variantType Variant type. (optional)
     * @param svType Structural Variant Type. (optional)
     * @param consequence Consequence (optional)
     * @param proteinStart Protein Start (optional)
     * @param proteinEnd Protein End (optional)
     * @param tumorType Tumor type name. OncoTree code is supported. (optional)
     * @param source Tumor type source. OncoTree tumor types are the default setting. We may have customized version, like Quest. (optional, default to oncotree)
     * @param levels Level of evidences. (optional)
     * @param highestLevelOnly Only show treatments of highest level (optional, default to false)
     * @param queryType Query type. There maybe slight differences between different query types. Currently support web or regular. (optional, default to regular)
     * @param evidenceType Evidence type. (optional)
     * @param hgvs HGVS varaint. Its priority is higher than entrezGeneId/hugoSymbol + variant combination (optional)
     * @param fields The fields to be returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchGetUsingGETAsync(String id, String hugoSymbol, Integer entrezGeneId, String variant, String variantType, String svType, String consequence, Integer proteinStart, Integer proteinEnd, String tumorType, String source, String levels, Boolean highestLevelOnly, String queryType, String evidenceType, String hgvs, String fields, final ApiCallback<IndicatorQueryResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchGetUsingGETValidateBeforeCall(id, hugoSymbol, entrezGeneId, variant, variantType, svType, consequence, proteinStart, proteinEnd, tumorType, source, levels, highestLevelOnly, queryType, evidenceType, hgvs, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IndicatorQueryResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchPostUsingPOST
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @param fields The fields to be returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchPostUsingPOSTCall(EvidenceQueries body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchPostUsingPOSTValidateBeforeCall(EvidenceQueries body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling searchPostUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = searchPostUsingPOSTCall(body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * searchPost
     * General search for possible combinations.
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @param fields The fields to be returned. (optional)
     * @return List&lt;IndicatorQueryResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IndicatorQueryResp> searchPostUsingPOST(EvidenceQueries body, String fields) throws ApiException {
        ApiResponse<List<IndicatorQueryResp>> resp = searchPostUsingPOSTWithHttpInfo(body, fields);
        return resp.getData();
    }

    /**
     * searchPost
     * General search for possible combinations.
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @param fields The fields to be returned. (optional)
     * @return ApiResponse&lt;List&lt;IndicatorQueryResp&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<IndicatorQueryResp>> searchPostUsingPOSTWithHttpInfo(EvidenceQueries body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = searchPostUsingPOSTValidateBeforeCall(body, fields, null, null);
        Type localVarReturnType = new TypeToken<List<IndicatorQueryResp>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * searchPost (asynchronously)
     * General search for possible combinations.
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @param fields The fields to be returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchPostUsingPOSTAsync(EvidenceQueries body, String fields, final ApiCallback<List<IndicatorQueryResp>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchPostUsingPOSTValidateBeforeCall(body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<IndicatorQueryResp>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for variantsLookupGetUsingGET
     * @param entrezGeneId The entrez gene ID. entrezGeneId is prioritize than hugoSymbol if both parameters have been defined (optional)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (optional)
     * @param variant variant name. (optional)
     * @param variantType variantType (optional)
     * @param consequence consequence (optional)
     * @param proteinStart proteinStart (optional)
     * @param proteinEnd proteinEnd (optional)
     * @param hgvs HGVS varaint. Its priority is higher than entrezGeneId/hugoSymbol + variant combination (optional)
     * @param fields The fields to be returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call variantsLookupGetUsingGETCall(Integer entrezGeneId, String hugoSymbol, String variant, String variantType, String consequence, Integer proteinStart, Integer proteinEnd, String hgvs, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/variants/lookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entrezGeneId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entrezGeneId", entrezGeneId));
        if (hugoSymbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hugoSymbol", hugoSymbol));
        if (variant != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("variant", variant));
        if (variantType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("variantType", variantType));
        if (consequence != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("consequence", consequence));
        if (proteinStart != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("proteinStart", proteinStart));
        if (proteinEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("proteinEnd", proteinEnd));
        if (hgvs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hgvs", hgvs));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call variantsLookupGetUsingGETValidateBeforeCall(Integer entrezGeneId, String hugoSymbol, String variant, String variantType, String consequence, Integer proteinStart, Integer proteinEnd, String hgvs, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = variantsLookupGetUsingGETCall(entrezGeneId, hugoSymbol, variant, variantType, consequence, proteinStart, proteinEnd, hgvs, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * variantsLookupGet
     * Search for variants.
     * @param entrezGeneId The entrez gene ID. entrezGeneId is prioritize than hugoSymbol if both parameters have been defined (optional)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (optional)
     * @param variant variant name. (optional)
     * @param variantType variantType (optional)
     * @param consequence consequence (optional)
     * @param proteinStart proteinStart (optional)
     * @param proteinEnd proteinEnd (optional)
     * @param hgvs HGVS varaint. Its priority is higher than entrezGeneId/hugoSymbol + variant combination (optional)
     * @param fields The fields to be returned. (optional)
     * @return List&lt;Alteration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Alteration> variantsLookupGetUsingGET(Integer entrezGeneId, String hugoSymbol, String variant, String variantType, String consequence, Integer proteinStart, Integer proteinEnd, String hgvs, String fields) throws ApiException {
        ApiResponse<List<Alteration>> resp = variantsLookupGetUsingGETWithHttpInfo(entrezGeneId, hugoSymbol, variant, variantType, consequence, proteinStart, proteinEnd, hgvs, fields);
        return resp.getData();
    }

    /**
     * variantsLookupGet
     * Search for variants.
     * @param entrezGeneId The entrez gene ID. entrezGeneId is prioritize than hugoSymbol if both parameters have been defined (optional)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (optional)
     * @param variant variant name. (optional)
     * @param variantType variantType (optional)
     * @param consequence consequence (optional)
     * @param proteinStart proteinStart (optional)
     * @param proteinEnd proteinEnd (optional)
     * @param hgvs HGVS varaint. Its priority is higher than entrezGeneId/hugoSymbol + variant combination (optional)
     * @param fields The fields to be returned. (optional)
     * @return ApiResponse&lt;List&lt;Alteration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Alteration>> variantsLookupGetUsingGETWithHttpInfo(Integer entrezGeneId, String hugoSymbol, String variant, String variantType, String consequence, Integer proteinStart, Integer proteinEnd, String hgvs, String fields) throws ApiException {
        com.squareup.okhttp.Call call = variantsLookupGetUsingGETValidateBeforeCall(entrezGeneId, hugoSymbol, variant, variantType, consequence, proteinStart, proteinEnd, hgvs, fields, null, null);
        Type localVarReturnType = new TypeToken<List<Alteration>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * variantsLookupGet (asynchronously)
     * Search for variants.
     * @param entrezGeneId The entrez gene ID. entrezGeneId is prioritize than hugoSymbol if both parameters have been defined (optional)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (optional)
     * @param variant variant name. (optional)
     * @param variantType variantType (optional)
     * @param consequence consequence (optional)
     * @param proteinStart proteinStart (optional)
     * @param proteinEnd proteinEnd (optional)
     * @param hgvs HGVS varaint. Its priority is higher than entrezGeneId/hugoSymbol + variant combination (optional)
     * @param fields The fields to be returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call variantsLookupGetUsingGETAsync(Integer entrezGeneId, String hugoSymbol, String variant, String variantType, String consequence, Integer proteinStart, Integer proteinEnd, String hgvs, String fields, final ApiCallback<List<Alteration>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = variantsLookupGetUsingGETValidateBeforeCall(entrezGeneId, hugoSymbol, variant, variantType, consequence, proteinStart, proteinEnd, hgvs, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Alteration>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for variantsLookupPostUsingPOST
     * @param body List of queries. (required)
     * @param fields The fields to be returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call variantsLookupPostUsingPOSTCall(List<VariantSearchQuery> body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/variants/lookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call variantsLookupPostUsingPOSTValidateBeforeCall(List<VariantSearchQuery> body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling variantsLookupPostUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = variantsLookupPostUsingPOSTCall(body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * variantsLookupPost
     * Search for variants.
     * @param body List of queries. (required)
     * @param fields The fields to be returned. (optional)
     * @return List&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<List<Object>> variantsLookupPostUsingPOST(List<VariantSearchQuery> body, String fields) throws ApiException {
        ApiResponse<List<List<Object>>> resp = variantsLookupPostUsingPOSTWithHttpInfo(body, fields);
        return resp.getData();
    }

    /**
     * variantsLookupPost
     * Search for variants.
     * @param body List of queries. (required)
     * @param fields The fields to be returned. (optional)
     * @return ApiResponse&lt;List&lt;List&lt;Object&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<List<Object>>> variantsLookupPostUsingPOSTWithHttpInfo(List<VariantSearchQuery> body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = variantsLookupPostUsingPOSTValidateBeforeCall(body, fields, null, null);
        Type localVarReturnType = new TypeToken<List<List<Object>>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * variantsLookupPost (asynchronously)
     * Search for variants.
     * @param body List of queries. (required)
     * @param fields The fields to be returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call variantsLookupPostUsingPOSTAsync(List<VariantSearchQuery> body, String fields, final ApiCallback<List<List<Object>>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = variantsLookupPostUsingPOSTValidateBeforeCall(body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<List<Object>>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
