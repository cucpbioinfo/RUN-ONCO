/*
 * OncoKB APIs
 * OncoKB, a comprehensive and curated precision oncology knowledge base, offers oncologists detailed, evidence-based information about individual somatic mutations and structural alterations present in patient tumors with the goal of supporting optimal treatment decisions.
 *
 * OpenAPI spec version: v1.0.0
 * Contact: team@oncokb.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package run.onco.connector.oncokb.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import run.onco.connector.oncokb.ApiCallback;
import run.onco.connector.oncokb.ApiClient;
import run.onco.connector.oncokb.ApiException;
import run.onco.connector.oncokb.ApiResponse;
import run.onco.connector.oncokb.Configuration;
import run.onco.connector.oncokb.Pair;
import run.onco.connector.oncokb.ProgressRequestBody;
import run.onco.connector.oncokb.ProgressResponseBody;
import run.onco.connector.oncokb.model.Evidence;
import run.onco.connector.oncokb.model.EvidenceQueries;
import run.onco.connector.oncokb.model.EvidenceQueryRes;
import run.onco.connector.oncokb.model.GeneEvidence;
import run.onco.connector.oncokb.model.IndicatorQueryResp;

public class EvidencesApi {
    private ApiClient apiClient;

    public EvidencesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EvidencesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for evidencesLookupGetUsingGET
     * @param entrezGeneId The entrez gene ID. (optional)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (optional)
     * @param variant Variant name. (optional)
     * @param tumorType Tumor type name. OncoTree code is supported. (optional)
     * @param consequence Consequence. Possible value: feature_truncation, frameshift_variant, inframe_deletion, inframe_insertion, start_lost, missense_variant, splice_region_variant, stop_gained, synonymous_variant (optional)
     * @param proteinStart Protein Start. (optional)
     * @param proteinEnd Protein End. (optional)
     * @param source Tumor type source. OncoTree tumor types are the default setting. We may have customized version, like Quest. (optional, default to oncotree)
     * @param highestLevelOnly Only show highest level evidences (optional, default to false)
     * @param levelOfEvidence Separate by comma. LEVEL_1, LEVEL_2A, LEVEL_2B, LEVEL_3A, LEVEL_3B, LEVEL_4, LEVEL_R1, LEVEL_R2, LEVEL_R3 (optional)
     * @param evidenceTypes Separate by comma. Evidence type includes GENE_SUMMARY, GENE_BACKGROUND, MUTATION_SUMMARY, ONCOGENIC, MUTATION_EFFECT, VUS, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, TUMOR_TYPE_SUMMARY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE (optional)
     * @param fields The fields to be returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call evidencesLookupGetUsingGETCall(Integer entrezGeneId, String hugoSymbol, String variant, String tumorType, String consequence, String proteinStart, String proteinEnd, String source, Boolean highestLevelOnly, String levelOfEvidence, String evidenceTypes, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/evidences/lookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (entrezGeneId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("entrezGeneId", entrezGeneId));
        if (hugoSymbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hugoSymbol", hugoSymbol));
        if (variant != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("variant", variant));
        if (tumorType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tumorType", tumorType));
        if (consequence != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("consequence", consequence));
        if (proteinStart != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("proteinStart", proteinStart));
        if (proteinEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("proteinEnd", proteinEnd));
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));
        if (highestLevelOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("highestLevelOnly", highestLevelOnly));
        if (levelOfEvidence != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("levelOfEvidence", levelOfEvidence));
        if (evidenceTypes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("evidenceTypes", evidenceTypes));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call evidencesLookupGetUsingGETValidateBeforeCall(Integer entrezGeneId, String hugoSymbol, String variant, String tumorType, String consequence, String proteinStart, String proteinEnd, String source, Boolean highestLevelOnly, String levelOfEvidence, String evidenceTypes, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = evidencesLookupGetUsingGETCall(entrezGeneId, hugoSymbol, variant, tumorType, consequence, proteinStart, proteinEnd, source, highestLevelOnly, levelOfEvidence, evidenceTypes, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * evidencesLookupGet
     * Search evidences. Multi-queries are supported.
     * @param entrezGeneId The entrez gene ID. (optional)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (optional)
     * @param variant Variant name. (optional)
     * @param tumorType Tumor type name. OncoTree code is supported. (optional)
     * @param consequence Consequence. Possible value: feature_truncation, frameshift_variant, inframe_deletion, inframe_insertion, start_lost, missense_variant, splice_region_variant, stop_gained, synonymous_variant (optional)
     * @param proteinStart Protein Start. (optional)
     * @param proteinEnd Protein End. (optional)
     * @param source Tumor type source. OncoTree tumor types are the default setting. We may have customized version, like Quest. (optional, default to oncotree)
     * @param highestLevelOnly Only show highest level evidences (optional, default to false)
     * @param levelOfEvidence Separate by comma. LEVEL_1, LEVEL_2A, LEVEL_2B, LEVEL_3A, LEVEL_3B, LEVEL_4, LEVEL_R1, LEVEL_R2, LEVEL_R3 (optional)
     * @param evidenceTypes Separate by comma. Evidence type includes GENE_SUMMARY, GENE_BACKGROUND, MUTATION_SUMMARY, ONCOGENIC, MUTATION_EFFECT, VUS, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, TUMOR_TYPE_SUMMARY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE (optional)
     * @param fields The fields to be returned. (optional)
     * @return List&lt;Evidence&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Evidence> evidencesLookupGetUsingGET(Integer entrezGeneId, String hugoSymbol, String variant, String tumorType, String consequence, String proteinStart, String proteinEnd, String source, Boolean highestLevelOnly, String levelOfEvidence, String evidenceTypes, String fields) throws ApiException {
        ApiResponse<List<Evidence>> resp = evidencesLookupGetUsingGETWithHttpInfo(entrezGeneId, hugoSymbol, variant, tumorType, consequence, proteinStart, proteinEnd, source, highestLevelOnly, levelOfEvidence, evidenceTypes, fields);
        return resp.getData();
    }

    /**
     * evidencesLookupGet
     * Search evidences. Multi-queries are supported.
     * @param entrezGeneId The entrez gene ID. (optional)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (optional)
     * @param variant Variant name. (optional)
     * @param tumorType Tumor type name. OncoTree code is supported. (optional)
     * @param consequence Consequence. Possible value: feature_truncation, frameshift_variant, inframe_deletion, inframe_insertion, start_lost, missense_variant, splice_region_variant, stop_gained, synonymous_variant (optional)
     * @param proteinStart Protein Start. (optional)
     * @param proteinEnd Protein End. (optional)
     * @param source Tumor type source. OncoTree tumor types are the default setting. We may have customized version, like Quest. (optional, default to oncotree)
     * @param highestLevelOnly Only show highest level evidences (optional, default to false)
     * @param levelOfEvidence Separate by comma. LEVEL_1, LEVEL_2A, LEVEL_2B, LEVEL_3A, LEVEL_3B, LEVEL_4, LEVEL_R1, LEVEL_R2, LEVEL_R3 (optional)
     * @param evidenceTypes Separate by comma. Evidence type includes GENE_SUMMARY, GENE_BACKGROUND, MUTATION_SUMMARY, ONCOGENIC, MUTATION_EFFECT, VUS, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, TUMOR_TYPE_SUMMARY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE (optional)
     * @param fields The fields to be returned. (optional)
     * @return ApiResponse&lt;List&lt;Evidence&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Evidence>> evidencesLookupGetUsingGETWithHttpInfo(Integer entrezGeneId, String hugoSymbol, String variant, String tumorType, String consequence, String proteinStart, String proteinEnd, String source, Boolean highestLevelOnly, String levelOfEvidence, String evidenceTypes, String fields) throws ApiException {
        com.squareup.okhttp.Call call = evidencesLookupGetUsingGETValidateBeforeCall(entrezGeneId, hugoSymbol, variant, tumorType, consequence, proteinStart, proteinEnd, source, highestLevelOnly, levelOfEvidence, evidenceTypes, fields, null, null);
        Type localVarReturnType = new TypeToken<List<Evidence>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * evidencesLookupGet (asynchronously)
     * Search evidences. Multi-queries are supported.
     * @param entrezGeneId The entrez gene ID. (optional)
     * @param hugoSymbol The gene symbol used in Human Genome Organisation. (optional)
     * @param variant Variant name. (optional)
     * @param tumorType Tumor type name. OncoTree code is supported. (optional)
     * @param consequence Consequence. Possible value: feature_truncation, frameshift_variant, inframe_deletion, inframe_insertion, start_lost, missense_variant, splice_region_variant, stop_gained, synonymous_variant (optional)
     * @param proteinStart Protein Start. (optional)
     * @param proteinEnd Protein End. (optional)
     * @param source Tumor type source. OncoTree tumor types are the default setting. We may have customized version, like Quest. (optional, default to oncotree)
     * @param highestLevelOnly Only show highest level evidences (optional, default to false)
     * @param levelOfEvidence Separate by comma. LEVEL_1, LEVEL_2A, LEVEL_2B, LEVEL_3A, LEVEL_3B, LEVEL_4, LEVEL_R1, LEVEL_R2, LEVEL_R3 (optional)
     * @param evidenceTypes Separate by comma. Evidence type includes GENE_SUMMARY, GENE_BACKGROUND, MUTATION_SUMMARY, ONCOGENIC, MUTATION_EFFECT, VUS, PROGNOSTIC_IMPLICATION, DIAGNOSTIC_IMPLICATION, TUMOR_TYPE_SUMMARY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_SENSITIVITY, STANDARD_THERAPEUTIC_IMPLICATIONS_FOR_DRUG_RESISTANCE, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_SENSITIVITY, INVESTIGATIONAL_THERAPEUTIC_IMPLICATIONS_DRUG_RESISTANCE (optional)
     * @param fields The fields to be returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call evidencesLookupGetUsingGETAsync(Integer entrezGeneId, String hugoSymbol, String variant, String tumorType, String consequence, String proteinStart, String proteinEnd, String source, Boolean highestLevelOnly, String levelOfEvidence, String evidenceTypes, String fields, final ApiCallback<List<Evidence>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = evidencesLookupGetUsingGETValidateBeforeCall(entrezGeneId, hugoSymbol, variant, tumorType, consequence, proteinStart, proteinEnd, source, highestLevelOnly, levelOfEvidence, evidenceTypes, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Evidence>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for evidencesLookupPostUsingPOST
     * @param body List of queries. Please see swagger.json for request body format. Please use JSON string. (required)
     * @param fields The fields to be returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call evidencesLookupPostUsingPOSTCall(EvidenceQueries body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/evidences/lookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call evidencesLookupPostUsingPOSTValidateBeforeCall(EvidenceQueries body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling evidencesLookupPostUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = evidencesLookupPostUsingPOSTCall(body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * evidencesLookupPost
     * Search evidences.
     * @param body List of queries. Please see swagger.json for request body format. Please use JSON string. (required)
     * @param fields The fields to be returned. (optional)
     * @return List&lt;EvidenceQueryRes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EvidenceQueryRes> evidencesLookupPostUsingPOST(EvidenceQueries body, String fields) throws ApiException {
        ApiResponse<List<EvidenceQueryRes>> resp = evidencesLookupPostUsingPOSTWithHttpInfo(body, fields);
        return resp.getData();
    }

    /**
     * evidencesLookupPost
     * Search evidences.
     * @param body List of queries. Please see swagger.json for request body format. Please use JSON string. (required)
     * @param fields The fields to be returned. (optional)
     * @return ApiResponse&lt;List&lt;EvidenceQueryRes&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EvidenceQueryRes>> evidencesLookupPostUsingPOSTWithHttpInfo(EvidenceQueries body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = evidencesLookupPostUsingPOSTValidateBeforeCall(body, fields, null, null);
        Type localVarReturnType = new TypeToken<List<EvidenceQueryRes>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * evidencesLookupPost (asynchronously)
     * Search evidences.
     * @param body List of queries. Please see swagger.json for request body format. Please use JSON string. (required)
     * @param fields The fields to be returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call evidencesLookupPostUsingPOSTAsync(EvidenceQueries body, String fields, final ApiCallback<List<EvidenceQueryRes>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = evidencesLookupPostUsingPOSTValidateBeforeCall(body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EvidenceQueryRes>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for evidencesUUIDGetUsingGET
     * @param uuid Unique identifier. (required)
     * @param fields The fields to be returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call evidencesUUIDGetUsingGETCall(String uuid, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/evidences/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call evidencesUUIDGetUsingGETValidateBeforeCall(String uuid, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling evidencesUUIDGetUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = evidencesUUIDGetUsingGETCall(uuid, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * evidencesUUIDGet
     * Get specific evidence.
     * @param uuid Unique identifier. (required)
     * @param fields The fields to be returned. (optional)
     * @return Evidence
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Evidence evidencesUUIDGetUsingGET(String uuid, String fields) throws ApiException {
        ApiResponse<Evidence> resp = evidencesUUIDGetUsingGETWithHttpInfo(uuid, fields);
        return resp.getData();
    }

    /**
     * evidencesUUIDGet
     * Get specific evidence.
     * @param uuid Unique identifier. (required)
     * @param fields The fields to be returned. (optional)
     * @return ApiResponse&lt;Evidence&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Evidence> evidencesUUIDGetUsingGETWithHttpInfo(String uuid, String fields) throws ApiException {
        com.squareup.okhttp.Call call = evidencesUUIDGetUsingGETValidateBeforeCall(uuid, fields, null, null);
        Type localVarReturnType = new TypeToken<Evidence>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * evidencesUUIDGet (asynchronously)
     * Get specific evidence.
     * @param uuid Unique identifier. (required)
     * @param fields The fields to be returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call evidencesUUIDGetUsingGETAsync(String uuid, String fields, final ApiCallback<Evidence> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = evidencesUUIDGetUsingGETValidateBeforeCall(uuid, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Evidence>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for evidencesUUIDsGetUsingPOST
     * @param uuids Unique identifier list. (required)
     * @param fields The fields to be returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call evidencesUUIDsGetUsingPOSTCall(List<String> uuids, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = uuids;

        // create path and map variables
        String localVarPath = "/evidences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call evidencesUUIDsGetUsingPOSTValidateBeforeCall(List<String> uuids, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'uuids' is set
        if (uuids == null) {
            throw new ApiException("Missing the required parameter 'uuids' when calling evidencesUUIDsGetUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = evidencesUUIDsGetUsingPOSTCall(uuids, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * evidencesUUIDsGet
     * Get specific evidences.
     * @param uuids Unique identifier list. (required)
     * @param fields The fields to be returned. (optional)
     * @return Evidence
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Evidence evidencesUUIDsGetUsingPOST(List<String> uuids, String fields) throws ApiException {
        ApiResponse<Evidence> resp = evidencesUUIDsGetUsingPOSTWithHttpInfo(uuids, fields);
        return resp.getData();
    }

    /**
     * evidencesUUIDsGet
     * Get specific evidences.
     * @param uuids Unique identifier list. (required)
     * @param fields The fields to be returned. (optional)
     * @return ApiResponse&lt;Evidence&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Evidence> evidencesUUIDsGetUsingPOSTWithHttpInfo(List<String> uuids, String fields) throws ApiException {
        com.squareup.okhttp.Call call = evidencesUUIDsGetUsingPOSTValidateBeforeCall(uuids, fields, null, null);
        Type localVarReturnType = new TypeToken<Evidence>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * evidencesUUIDsGet (asynchronously)
     * Get specific evidences.
     * @param uuids Unique identifier list. (required)
     * @param fields The fields to be returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call evidencesUUIDsGetUsingPOSTAsync(List<String> uuids, String fields, final ApiCallback<Evidence> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = evidencesUUIDsGetUsingPOSTValidateBeforeCall(uuids, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Evidence>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for genesEntrezGeneIdEvidencesGetUsingGET
     * @param entrezGeneId The entrez gene ID. (required)
     * @param evidenceTypes Separate by comma. Evidence type includes GENE_SUMMARY, GENE_BACKGROUND (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call genesEntrezGeneIdEvidencesGetUsingGETCall(Integer entrezGeneId, String evidenceTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/genes/{entrezGeneId}/evidences"
            .replaceAll("\\{" + "entrezGeneId" + "\\}", apiClient.escapeString(entrezGeneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (evidenceTypes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("evidenceTypes", evidenceTypes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call genesEntrezGeneIdEvidencesGetUsingGETValidateBeforeCall(Integer entrezGeneId, String evidenceTypes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entrezGeneId' is set
        if (entrezGeneId == null) {
            throw new ApiException("Missing the required parameter 'entrezGeneId' when calling genesEntrezGeneIdEvidencesGetUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = genesEntrezGeneIdEvidencesGetUsingGETCall(entrezGeneId, evidenceTypes, progressListener, progressRequestListener);
        return call;

    }

    /**
     * genesEntrezGeneIdEvidencesGet
     * Get list of evidences for specific gene.
     * @param entrezGeneId The entrez gene ID. (required)
     * @param evidenceTypes Separate by comma. Evidence type includes GENE_SUMMARY, GENE_BACKGROUND (optional)
     * @return List&lt;GeneEvidence&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<GeneEvidence> genesEntrezGeneIdEvidencesGetUsingGET(Integer entrezGeneId, String evidenceTypes) throws ApiException {
        ApiResponse<List<GeneEvidence>> resp = genesEntrezGeneIdEvidencesGetUsingGETWithHttpInfo(entrezGeneId, evidenceTypes);
        return resp.getData();
    }

    /**
     * genesEntrezGeneIdEvidencesGet
     * Get list of evidences for specific gene.
     * @param entrezGeneId The entrez gene ID. (required)
     * @param evidenceTypes Separate by comma. Evidence type includes GENE_SUMMARY, GENE_BACKGROUND (optional)
     * @return ApiResponse&lt;List&lt;GeneEvidence&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<GeneEvidence>> genesEntrezGeneIdEvidencesGetUsingGETWithHttpInfo(Integer entrezGeneId, String evidenceTypes) throws ApiException {
        com.squareup.okhttp.Call call = genesEntrezGeneIdEvidencesGetUsingGETValidateBeforeCall(entrezGeneId, evidenceTypes, null, null);
        Type localVarReturnType = new TypeToken<List<GeneEvidence>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * genesEntrezGeneIdEvidencesGet (asynchronously)
     * Get list of evidences for specific gene.
     * @param entrezGeneId The entrez gene ID. (required)
     * @param evidenceTypes Separate by comma. Evidence type includes GENE_SUMMARY, GENE_BACKGROUND (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call genesEntrezGeneIdEvidencesGetUsingGETAsync(Integer entrezGeneId, String evidenceTypes, final ApiCallback<List<GeneEvidence>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = genesEntrezGeneIdEvidencesGetUsingGETValidateBeforeCall(entrezGeneId, evidenceTypes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<GeneEvidence>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchPostUsingPOST
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @param fields The fields to be returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchPostUsingPOSTCall(EvidenceQueries body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchPostUsingPOSTValidateBeforeCall(EvidenceQueries body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling searchPostUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = searchPostUsingPOSTCall(body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * searchPost
     * General search for possible combinations.
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @param fields The fields to be returned. (optional)
     * @return List&lt;IndicatorQueryResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IndicatorQueryResp> searchPostUsingPOST(EvidenceQueries body, String fields) throws ApiException {
        ApiResponse<List<IndicatorQueryResp>> resp = searchPostUsingPOSTWithHttpInfo(body, fields);
        return resp.getData();
    }

    /**
     * searchPost
     * General search for possible combinations.
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @param fields The fields to be returned. (optional)
     * @return ApiResponse&lt;List&lt;IndicatorQueryResp&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<IndicatorQueryResp>> searchPostUsingPOSTWithHttpInfo(EvidenceQueries body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = searchPostUsingPOSTValidateBeforeCall(body, fields, null, null);
        Type localVarReturnType = new TypeToken<List<IndicatorQueryResp>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * searchPost (asynchronously)
     * General search for possible combinations.
     * @param body List of queries. Please see swagger.json for request body format. (required)
     * @param fields The fields to be returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchPostUsingPOSTAsync(EvidenceQueries body, String fields, final ApiCallback<List<IndicatorQueryResp>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchPostUsingPOSTValidateBeforeCall(body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<IndicatorQueryResp>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
